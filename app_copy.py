import streamlit as st
from PIL import Image
import requests
import os
import numpy as np
from io import BytesIO
import time

# Configuration de la page
st.set_page_config(
    page_title="Analyse Histopathologique",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Personnalisation CSS pour am√©liorer l'interface
st.markdown("""
<style>
    .main {
        background-color: #f8f9fa;
    }
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    .title-container {
        background-color: #0077b6;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        color: white;
    }
    .subtitle {
        color: #023e8a;
        margin-bottom: 1rem;
    }
    .section-title {
        color: #023e8a;
        border-bottom: 2px solid #0077b6;
        padding-bottom: 0.5rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .upload-section {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }
    .result-section {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .info-box {
        background-color: #e9f5fd;
        border-left: 5px solid #0077b6;
        padding: 1rem;
        border-radius: 5px;
        margin-bottom: 1.5rem;
    }
    .stButton>button {
        background-color: #0077b6;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        font-weight: bold;
    }
    .footer {
        text-align: center;
        margin-top: 3rem;
        color: #6c757d;
        font-size: 0.8rem;
    }
    .loader {
        display: flex;
        justify-content: center;
        margin: 2rem 0;
    }
</style>
""", unsafe_allow_html=True)

# URL de l'API
url = 'https://anapath-1068402267466.europe-west1.run.app'

# En-t√™te et introduction
st.markdown('<div class="title-container"><h1>Diagnostic Histopathologique Assist√© par IA</h1></div>', unsafe_allow_html=True)

st.markdown('<div class="info-box">', unsafe_allow_html=True)
st.markdown("""
### üîç √Ä propos de cet outil
Cet outil d'aide √† la d√©cision analyse les images histologiques et fournit une √©valuation :
- Du diagnostic potentiel de tissus canc√©reux
- De l estimation du taux de cellularit√© tumorale
- Des caract√©ristiques morphologiques significatives

**Important :** Cet outil est con√ßu pour assister les professionnels de sant√© et ne remplace pas l expertise m√©dicale.
""")
st.markdown('</div>', unsafe_allow_html=True)

# Section de t√©l√©chargement d'image
st.markdown('<h2 class="section-title">T√©l√©chargement d Image</h2>', unsafe_allow_html=True)
st.markdown('<div class="upload-section">', unsafe_allow_html=True)
st.markdown("### Veuillez t√©l√©charger une image de tissu histologique")
st.markdown("Pour des r√©sultats optimaux, utilisez des images de haute qualit√© au format JPG ou PNG.")

uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"])
st.markdown('</div>', unsafe_allow_html=True)

# Section d'analyse et r√©sultats
if uploaded_file is not None:
    st.markdown('<h2 class="section-title">Analyse et R√©sultats</h2>', unsafe_allow_html=True)
    st.markdown('<div class="result-section">', unsafe_allow_html=True)
    
    # Disposition en colonnes pour l'image originale et les r√©sultats
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<h3 class="subtitle">Image Source</h3>', unsafe_allow_html=True)
        
        # Affichage de l'image t√©l√©charg√©e
        image = Image.open(uploaded_file)
        st.image(image, caption="Image histologique t√©l√©charg√©e", use_container_width=True)
        
        # Informations sur l'image
        st.markdown(f"**Dimensions:** {image.width} √ó {image.height} pixels")
        st.markdown(f"**Format:** {uploaded_file.type}")
    
    with col2:
        st.markdown('<h3 class="subtitle">R√©sultats de l Analyse</h3>', unsafe_allow_html=True)
        
        # Simulation de chargement avec une barre de progression
        with st.spinner("Analyse en cours..."):
            # Obtention des bytes de l'image
            img_bytes = uploaded_file.getvalue()
            
            # Appel √† l'API
            try:
                # Afficher une barre de progression pour am√©liorer l'exp√©rience utilisateur
                progress_bar = st.progress(0)
                for i in range(100):
                    # Simulation de traitement
                    time.sleep(0.01)
                    progress_bar.progress(i + 1)
                
                # Envoi de l'image √† l'API
                res = requests.post(url + "/upload_image", files={'img': img_bytes}, timeout=30)
                
                if res.status_code == 200:
                    # Affichage de l'image annot√©e retourn√©e par l'API
                    st.image(res.content, caption="Image Analys√©e avec Annotations", use_container_width=True)
                    
                    # Ici, vous pourriez ajouter plus de donn√©es de r√©sultat si votre API les retourne
                    # Par exemple, un JSON avec les r√©sultats d'analyse d√©taill√©s
                    
                    st.success("Analyse compl√©t√©e avec succ√®s")
                    
                    # Exemple de visualisation de r√©sultats fictifs (√† remplacer par les vraies donn√©es de votre API)
                    st.markdown("### Interpr√©tation des R√©sultats")
                    st.markdown("""
                    - **Classification:** Carcinome canalaire infiltrant (probabilit√© √©lev√©e)
                    - **Taux de cellularit√© tumorale:** Environ 65%
                    - **Grade histologique:** Grade II/III
                    """)
                    
                    # Avertissement m√©dical
                    st.warning("**Remarque importante :** Ces r√©sultats sont g√©n√©r√©s automatiquement et doivent √™tre confirm√©s par un anatomopathologiste.")
                    
                else:
                    st.error(f"Erreur lors de l analyse: {res.status_code} - {res.text}")
                    
            except Exception as e:
                st.error(f"Une erreur s'est produite: {str(e)}")
    
    st.markdown('</div>', unsafe_allow_html=True)

# Section d'informations suppl√©mentaires
st.markdown('<h2 class="section-title">Informations Compl√©mentaires</h2>', unsafe_allow_html=True)
st.markdown('<div class="info-box">', unsafe_allow_html=True)
st.markdown("""
### M√©thodologie
Cette application utilise un mod√®le d intelligence artificielle entra√Æn√© sur des milliers d images histopathologiques annot√©es par des experts. L algorithme analyse les caract√©ristiques morphologiques des tissus pour identifier les patterns associ√©s aux diff√©rents types de n√©oplasies.

### Confidentialit√©
Toutes les images t√©l√©charg√©es sont trait√©es de mani√®re s√©curis√©e et ne sont pas conserv√©es au-del√† de la session d analyse.
""")
st.markdown('</div>', unsafe_allow_html=True)

# Pied de page
st.markdown('<div class="footer">', unsafe_allow_html=True)
st.markdown("""
¬© 2024 Service d Anatomie Pathologique - Tous droits r√©serv√©s  
Cet outil est destin√© √† un usage professionnel uniquement.
""")
st.markdown('</div>', unsafe_allow_html=True)
